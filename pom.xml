<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>no.ecm</groupId>
    <artifactId>exam</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    <modules>
		<module>authentication</module>
        <module>e2etest</module>
        <module>eureka</module>
        <module>gateway</module>
        <module>movie</module>
        <module>order</module>
        <module>utils</module>
        <module>user</module>
		<module>cinema</module>
		<module>creditcard</module>
		<module>report</module>
        <module>frontend</module>
    </modules>

    <contributors>
        <contributor>
            <name>Mudasar Ahmad</name>
            <email>ahmmud16@hotmail.com</email>
            <organization>Westerdals Oslo ACT</organization>
            <organizationUrl>http://westerdals.no</organizationUrl>
            <roles>
                <role>developer</role>
                <role>tester</role>
            </roles>
        </contributor>
        <contributor>
            <name>Endre Synnes</name>
            <email>endre.m.synnes@gmail.com</email>
            <organization>Westerdals Oslo ACT</organization>
            <organizationUrl>http://westerdals.no</organizationUrl>
            <roles>
                <role>developer</role>
                <role>tester</role>
            </roles>
        </contributor>
        <contributor>
            <name>Christian Marker</name>
            <email>post@cmarker.no</email>
            <organization>Westerdals Oslo ACT</organization>
            <organizationUrl>http://westerdals.no</organizationUrl>
            <roles>
                <role>developer</role>
                <role>tester</role>
            </roles>
        </contributor>
    </contributors>

    <properties>
	    <!-- ENV -->
	    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

	    <!-- KOTLIN, JAVA & MAVEN -->
        <maven-compiler-plugin.version>3.6.1</maven-compiler-plugin.version>

	    <kotlin.compiler.incremental>true</kotlin.compiler.incremental>
	    <kotlin.version>1.2.70</kotlin.version>
		<kotlin.compiler.jvmTarget>1.8</kotlin.compiler.jvmTarget>

	    <java.version>1.8</java.version>

	    <!-- SPRING -->
	    <spring.version>2.3.0.RELEASE</spring.version>
		<version.springcloud>Finchley.SR1</version.springcloud>
		<version.springcloud.eureka.client>3.0.5</version.springcloud.eureka.client>
		<version.springcloud.eureka.server>2.0.1.RELEASE</version.springcloud.eureka.server>

	    <!-- DATABASES -->
	    <h2.version>1.4.196</h2.version>
	    <version.postgres>42.1.4</version.postgres>

	    <!-- JSON -->
	    <google-code-json.version>2.8.1</google-code-json.version>
	    <jackson-datatype-jsr310.version>2.8.9</jackson-datatype-jsr310.version>

	    <!-- TEST -->
	    <rest-assured.version>3.0.1</rest-assured.version>
	    <resteasy-client.version>3.1.3.Final</resteasy-client.version>
	    <version.junit>4.12</version.junit>
	    <version.testcontainers>1.9.1</version.testcontainers>
		<version.jacoco>0.7.9</version.jacoco>

		<version.selenium>3.9.0</version.selenium>

		<skipIntegrationTests>true</skipIntegrationTests>

	    <!-- UTILS -->
	    <version.logback-classic>1.2.3</version.logback-classic>
	    <version.jcl-over-slf4j>1.7.25</version.jcl-over-slf4j>
	    <spring-fox-swagger2.version>2.9.2</spring-fox-swagger2.version>

		<!-- OTHER -->
        <version.wiremock>2.2.1</version.wiremock>
        <version.awaitility>3.0.0</version.awaitility>

		<!-- GraphQL -->
		<version.graphql-spring>4.2.0</version.graphql-spring>

		<!-- JACOCO REPORT -->
		<version.jacoco>0.8.2</version.jacoco>

		<!-- Circuit Breaker -->
		<version.hystrix>1.5.12</version.hystrix>

	</properties>

	<!-- GLOBAL KOTLIN VERSION -->
	<dependencies>
		<dependency>
			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-stdlib-jdk8</artifactId>
			<version>${kotlin.version}</version>
		</dependency>
		<dependency>
			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-reflect</artifactId>
			<version>${kotlin.version}</version>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>

			<dependency>
				<groupId>no.ecm</groupId>
				<artifactId>utils</artifactId>
				<version>1.0-SNAPSHOT</version>
			</dependency>

			<!-- SPRING -->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-parent</artifactId>
				<version>${spring.version}</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-data-jpa</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-web</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-test</artifactId>
				<version>${spring.version}</version>
				<scope>test</scope>
			</dependency>

			<dependency>
				<!-- for code coverage -->
				<groupId>org.jacoco</groupId>
				<artifactId>org.jacoco.core</artifactId>
				<version>${version.jacoco}</version>
				<scope>test</scope>
			</dependency>

			<!-- DATABASE -->
			<dependency>
				<groupId>com.h2database</groupId>
				<artifactId>h2</artifactId>
				<version>${h2.version}</version>
			</dependency>
			<dependency>
				<groupId>org.postgresql</groupId>
				<artifactId>postgresql</artifactId>
				<version>${version.postgres}</version>
			</dependency>

			<!-- Flyway -->
			<dependency>
				<groupId>org.flywaydb</groupId>
				<artifactId>flyway-core</artifactId>
				<version>5.2.4</version>
			</dependency>

			<!-- SPRINGFOX & SWAGGER -->
			<dependency>
				<groupId>io.springfox</groupId>
				<artifactId>springfox-swagger2</artifactId>
				<version>${spring-fox-swagger2.version}</version>
			</dependency>
			<dependency>
				<groupId>io.springfox</groupId>
				<artifactId>springfox-swagger-ui</artifactId>
				<version>${spring-fox-swagger2.version}</version>
			</dependency>
			<dependency>
				<groupId>io.springfox</groupId>
				<artifactId>springfox-spring-web</artifactId>
				<version>${spring-fox-swagger2.version}</version>
			</dependency>

			<!-- JSON UTILS -->
			<dependency>
				<groupId>com.google.code.gson</groupId>
				<artifactId>gson</artifactId>
				<version>${google-code-json.version}</version>
			</dependency>


			<!-- REST ASSURED -->
			<dependency>
				<groupId>io.rest-assured</groupId>
				<artifactId>rest-assured</artifactId>
				<version>${rest-assured.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.jboss.resteasy</groupId>
				<artifactId>resteasy-client</artifactId>
				<version>${resteasy-client.version}</version>
				<scope>test</scope>
			</dependency>

			<!--  GraphQL -->
			<dependency>
				<groupId>com.graphql-java</groupId>
				<artifactId>graphql-spring-boot-starter</artifactId>
				<version>${version.graphql-spring}</version>
			</dependency>
			<dependency>
				<groupId>com.graphql-java</groupId>
				<artifactId>graphiql-spring-boot-starter</artifactId>
				<version>${version.graphql-spring}</version>
			</dependency>
			<dependency>
				<groupId>com.graphql-java</groupId>
				<artifactId>voyager-spring-boot-starter</artifactId>
				<version>${version.graphql-spring}</version>
			</dependency>
			<dependency>
				<groupId>com.graphql-java</groupId>
				<artifactId>graphql-java-tools</artifactId>
				<version>5.1.0</version>
			</dependency>


			<!--Eureka dependecies-->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-actuator</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-netflix-eureka-server -->
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
				<version>${version.springcloud.eureka.server}</version>
			</dependency>
			<!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-netflix-eureka-client -->
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
				<version>${version.springcloud.eureka.client}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-gateway-core</artifactId>
				<version>2.0.2.RELEASE</version>
			</dependency>

			<dependency>
				<groupId>ch.qos.logback</groupId>
				<artifactId>logback-classic</artifactId>
				<version>${version.logback-classic}</version>
			</dependency>

			<!-- LOGGER -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>jcl-over-slf4j</artifactId>
				<version>${version.jcl-over-slf4j}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-security</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<!-- REDIS -->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-data-redis</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<!-- TEST -->
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${version.junit}</version>
				<scope>test</scope>
			</dependency>

			<dependency>
				<!-- used to control a browser for system testing -->
				<groupId>org.seleniumhq.selenium</groupId>
				<artifactId>selenium-java</artifactId>
				<version>${version.selenium}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<!-- used to control a browser for system testing -->
				<groupId>org.seleniumhq.selenium</groupId>
				<artifactId>selenium-api</artifactId>
				<version>${version.selenium}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<!-- used to control a browser for system testing -->
				<groupId>org.seleniumhq.selenium</groupId>
				<artifactId>selenium-chrome-driver</artifactId>
				<version>${version.selenium}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<!-- used to control a browser for system testing -->
				<groupId>org.seleniumhq.selenium</groupId>
				<artifactId>selenium-remote-driver</artifactId>
				<version>${version.selenium}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<!-- used to control a browser for system testing -->
				<groupId>org.seleniumhq.selenium</groupId>
				<artifactId>selenium-support</artifactId>
				<version>${version.selenium}</version>
				<scope>test</scope>
			</dependency>

			<!-- TO USE DOCKER FROM TEST -->
			<dependency>
				<groupId>org.testcontainers</groupId>
				<artifactId>testcontainers</artifactId>
				<version>${version.testcontainers}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<!-- FOR HANDLING WAITING OF ASYNC EVENTS -->
				<groupId>org.awaitility</groupId>
				<artifactId>awaitility</artifactId>
				<version>${version.awaitility}</version>
				<scope>test</scope>
			</dependency>

			<dependency>
				<!-- to mock web services -->
				<groupId>com.github.tomakehurst</groupId>
				<artifactId>wiremock-standalone</artifactId>
				<version>${version.wiremock}</version>
				<scope>test</scope>
			</dependency>
			<!-- NETFLIX STACK: RIBBON, EUREKA -->
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${version.springcloud}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<!--RabbitMq-->
			<!--<dependency>-->
			<!--<groupId>org.springframework.boot</groupId>-->
			<!--<artifactId>spring-boot-starter-amqp</artifactId>-->
			<!--<version>${spring.version}</version>-->
			<!--</dependency>-->

			<!-- Circuit Breaker -->
			<dependency>
				<groupId>com.netflix.hystrix</groupId>
				<artifactId>hystrix-core</artifactId>
				<version>${version.hystrix}</version>
			</dependency>

		</dependencies>
	</dependencyManagement>


	<build>
		<plugins>
			<!--
				If you have modules with both Kotlin and Java code, the documentation states
				that it is important that the Kotlin compiler plugin is executed before the Java compiler.
				See https://kotlinlang.org/docs/kotlin-docs.pdf

				However, here we are not in such case. There is one exception though.
				In some modules (eg SOAP) we do automatically generate Java source code before
				the compilation phase.
				To make it usable from Kotlin, we need to compile such Java code before the
				Kotlin one. Note: that Java code does not call any Kotlin code.
				Therefore, here we force the execution of the Java compiler BEFORE
				the one of Kotlin.
			  -->

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>

			<plugin>
				<artifactId>kotlin-maven-plugin</artifactId>
				<groupId>org.jetbrains.kotlin</groupId>
			</plugin>

			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
			</plugin>
		</plugins>

		<pluginManagement>
			<plugins>
				<plugin>
					<!-- see https://kotlinlang.org/docs/reference/using-maven.html -->
					<artifactId>kotlin-maven-plugin</artifactId>
					<groupId>org.jetbrains.kotlin</groupId>
					<version>${kotlin.version}</version>
					<configuration>
						<compilerPlugins>
							<plugin>spring</plugin>
							<plugin>jpa</plugin>
						</compilerPlugins>
					</configuration>
					<dependencies>
						<dependency>
							<groupId>org.jetbrains.kotlin</groupId>
							<artifactId>kotlin-maven-allopen</artifactId>
							<version>${kotlin.version}</version>
						</dependency>
						<dependency>
							<groupId>org.jetbrains.kotlin</groupId>
							<artifactId>kotlin-maven-noarg</artifactId>
							<version>${kotlin.version}</version>
						</dependency>
					</dependencies>
					<executions>
						<execution>
							<id>compile</id>
							<goals>
								<goal>compile</goal>
							</goals>
							<configuration>
								<sourceDirs>
									<sourceDir>${project.basedir}/src/main/kotlin</sourceDir>
								</sourceDirs>
							</configuration>
						</execution>
						<execution>
							<id>test-compile</id>
							<goals>
								<goal>test-compile</goal>
							</goals>
							<configuration>
								<sourceDirs>
									<sourceDir>${project.basedir}/src/test/kotlin</sourceDir>
								</sourceDirs>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>

					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${maven-compiler-plugin.version}</version>
					<inherited>true</inherited>
					<configuration>
						<source>${java.version}</source>
						<target>${java.version}</target>
					</configuration>
					<executions>
						<!-- Replacing default-compile as it is treated specially by maven -->
						<execution>
							<id>default-compile</id>
							<phase>none</phase>
						</execution>
						<!-- Replacing default-testCompile as it is treated specially by maven -->
						<execution>
							<id>default-testCompile</id>
							<phase>none</phase>
						</execution>
						<execution>
							<id>java-compile</id>
							<phase>compile</phase>
							<goals>
								<goal>compile</goal>
							</goals>
						</execution>
						<execution>
							<id>java-test-compile</id>
							<phase>test-compile</phase>
							<goals>
								<goal>testCompile</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<!-- Need to create self-executable uber/fat jars -->
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<version>${spring.version}</version>
					<executions>
						<execution>
							<goals>
								<goal>repackage</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<version>2.19.1</version>
					<executions>
						<execution>
							<goals>
								<goal>integration-test</goal>
								<goal>verify</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<skipITs>${skipIntegrationTests}</skipITs>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${version.jacoco}</version>
					<executions>
						<execution>
							<id>default-prepare-agent</id>
							<goals>
								<goal>prepare-agent</goal>
							</goals>
						</execution>
						<execution>
							<id>default-report</id>
							<phase>prepare-package</phase>
							<goals>
								<goal>report</goal>
							</goals>
						</execution>
						<execution>
							<id>default-prepare-agent-integration</id>
							<phase>package</phase>
							<goals>
								<goal>prepare-agent-integration</goal>
							</goals>
						</execution>
						<execution>
							<id>default-report-integration</id>
							<goals>
								<goal>report-integration</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>


</project>